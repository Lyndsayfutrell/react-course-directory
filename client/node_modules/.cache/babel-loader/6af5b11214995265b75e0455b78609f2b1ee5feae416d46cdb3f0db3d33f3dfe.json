{"ast":null,"code":"import apiBaseUrl from './config';\nexport default class Data {\n  api(path) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let requiresAuth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let credentials = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const url = apiBaseUrl + path;\n    console.log(url);\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    };\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n    if (requiresAuth) {\n      const encodedCredentials = btoa(`${credentials.username}:${credentials.password}`);\n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n    return fetch(url, options, {\n      mode: 'cors'\n    });\n  }\n  async getUser(username, password) {\n    const response = await this.api(`/users`, 'GET', null, true, {\n      username,\n      password\n    });\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    } else if (response.status === 401) {\n      return null;\n    } else {\n      throw new Error();\n    }\n  }\n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n  async getCourses() {\n    const response = await this.api('/courses', 'GET');\n    if (response.status === 201) {\n      return response.json().then(data => data);\n    } else {\n      throw new Error();\n    }\n  }\n}","map":{"version":3,"names":["apiBaseUrl","Data","api","path","method","body","requiresAuth","credentials","url","console","log","options","headers","JSON","stringify","encodedCredentials","btoa","username","password","fetch","mode","getUser","response","status","json","then","data","Error","createUser","user","errors","getCourses"],"sources":["/Users/lyndsayfutrell/Desktop/FullStack/ProjectTen/client/src/Data.js"],"sourcesContent":["import apiBaseUrl from './config';\n\nexport default class Data {\n  api(path, method = 'GET', body = null, requiresAuth = false, credentials = null) {\n    const url = apiBaseUrl + path;\n    console.log(url);\n  \n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if (requiresAuth) {    \n      const encodedCredentials = btoa(`${credentials.username}:${credentials.password}`);\n\n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n\n    return fetch(url, options, {mode: 'cors'});\n  }\n\n  async getUser(username, password) {\n    const response = await this.api(`/users`, 'GET', null, true, { username, password });\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    }\n    else if (response.status === 401) {\n      return null;\n    }\n    else {\n      throw new Error();\n    }\n  }\n  \n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n    if (response.status === 201) {\n      return [];\n    }\n    else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    }\n    else {\n      throw new Error();\n    }\n  }\n\n  async getCourses() {\n    const response = await this.api('/courses', 'GET');\n    if (response.status === 201) {\n        return response.json().then(data => data);\n      }\n      else {\n        throw new Error();\n      }\n    }\n\n\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,UAAU;AAEjC,eAAe,MAAMC,IAAI,CAAC;EACxBC,GAAG,CAACC,IAAI,EAAyE;IAAA,IAAvEC,MAAM,uEAAG,KAAK;IAAA,IAAEC,IAAI,uEAAG,IAAI;IAAA,IAAEC,YAAY,uEAAG,KAAK;IAAA,IAAEC,WAAW,uEAAG,IAAI;IAC7E,MAAMC,GAAG,GAAGR,UAAU,GAAGG,IAAI;IAC7BM,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAEhB,MAAMG,OAAO,GAAG;MACdP,MAAM;MACNQ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,IAAIP,IAAI,KAAK,IAAI,EAAE;MACjBM,OAAO,CAACN,IAAI,GAAGQ,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;IACrC;IAEA,IAAIC,YAAY,EAAE;MAChB,MAAMS,kBAAkB,GAAGC,IAAI,CAAE,GAAET,WAAW,CAACU,QAAS,IAAGV,WAAW,CAACW,QAAS,EAAC,CAAC;MAElFP,OAAO,CAACC,OAAO,CAAC,eAAe,CAAC,GAAI,SAAQG,kBAAmB,EAAC;IAClE;IAEA,OAAOI,KAAK,CAACX,GAAG,EAAEG,OAAO,EAAE;MAACS,IAAI,EAAE;IAAM,CAAC,CAAC;EAC5C;EAEA,MAAMC,OAAO,CAACJ,QAAQ,EAAEC,QAAQ,EAAE;IAChC,MAAMI,QAAQ,GAAG,MAAM,IAAI,CAACpB,GAAG,CAAE,QAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE;MAAEe,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACpF,IAAII,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOD,QAAQ,CAACE,IAAI,EAAE,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC;IAC3C,CAAC,MACI,IAAIJ,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAChC,OAAO,IAAI;IACb,CAAC,MACI;MACH,MAAM,IAAII,KAAK,EAAE;IACnB;EACF;EAEA,MAAMC,UAAU,CAACC,IAAI,EAAE;IACrB,MAAMP,QAAQ,GAAG,MAAM,IAAI,CAACpB,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE2B,IAAI,CAAC;IACvD,IAAIP,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAO,EAAE;IACX,CAAC,MACI,IAAID,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAChC,OAAOD,QAAQ,CAACE,IAAI,EAAE,CAACC,IAAI,CAACC,IAAI,IAAI;QAClC,OAAOA,IAAI,CAACI,MAAM;MACpB,CAAC,CAAC;IACJ,CAAC,MACI;MACH,MAAM,IAAIH,KAAK,EAAE;IACnB;EACF;EAEA,MAAMI,UAAU,GAAG;IACjB,MAAMT,QAAQ,GAAG,MAAM,IAAI,CAACpB,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;IAClD,IAAIoB,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACzB,OAAOD,QAAQ,CAACE,IAAI,EAAE,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC;IAC3C,CAAC,MACI;MACH,MAAM,IAAIC,KAAK,EAAE;IACnB;EACF;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}